services:
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8888:8888"
    networks:
      - gateway_net
    depends_on:
      - ms-user
      - ms-locations
      - kafka
    restart: unless-stopped
  
  ms-user:
    build: ./msuser
    container_name: ms-user
    expose:
      - "8080"
    environment:
      - DATABASE_HOST=user-db
      - DATABASE_PORT=3306
      - DATABASE_NAME=msuser_db
      - DATABASE_USER=user
      - DATABASE_PASSWORD=password
    networks:
      - gateway_net
      - user_net
    depends_on:
      user-db:
        condition: service_healthy
    restart: unless-stopped
  
  ms-locations:
    build: ./ms-locations
    container_name: ms-locations
    expose:
      - "8081"
    environment:
      - DATABASE_HOST=location-db
      - DATABASE_PORT=3306
      - DATABASE_NAME=mslocations_db
      - DATABASE_USER=location_user
      - DATABASE_PASSWORD=location_pass
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
    networks:
      - gateway_net
      - location_net
    depends_on:
      location-db:
        condition: service_healthy
      kafka:
        condition: service_started
    restart: unless-stopped
  
  user-db:
    image: mysql:8.0
    container_name: user-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: msuser_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    volumes:
      - user_db_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - user_net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 20
  
  location-db:
    image: mysql:8.0
    container_name: location-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: mslocations_db
      MYSQL_USER: location_user
      MYSQL_PASSWORD: location_pass
    volumes:
      - location_db_data:/var/lib/mysql
      - ./init-locations.sql:/docker-entrypoint-initdb.d/init-locations.sql
    networks:
      - location_net
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      start_period: 10s
      interval: 5s
      timeout: 5s
      retries: 20
  kafka:
    image: apache/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
    networks:
      - gateway_net
      - location_net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions.sh", "--bootstrap-server=localhost:9092"]
      start_period: 15s
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  user_db_data:
    driver: local
  location_db_data:
    driver: local

networks:
  gateway_net:
    driver: bridge
  user_net:
    driver: bridge
  location_net:
    driver: bridge